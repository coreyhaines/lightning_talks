Go through discussion about where to start!

Talks index

Go to URL
- build route
- build controller
- build action
- build view

Show talks
- add iteration to view
- add empty array as list of @talks to controller
- add seed file with some talks
- change empty array to Talk.all

Decision Point: What Next?
- Submit a talk
- Vote on a talk

Which adds value?
Submit a talk - is there an alternate way to do it?
Vote on a talk - direct feature making application more useful

Which feature would allow us to get closer to using the application?
Vote on a talk

Start with display of vote count
- add to view
- create a migration to add it
rails g migration add_vote_count_to_talk vote_count:integer
make default = 0
- add to seed file
vote_count: rand(10)

- Catch mass-assignment issue
- Also need to flush talks at top of seed file

Casting a vote
- add a "LIKE" link to the view
  - emphasize that we are 'creating' a vote
- build a Votes controller
- build create action
- redirect back to index
  - But this doesn't add a vote
- add controller code to add a vote to the talk (talk.add_vote!)
- add model method
  - This still doesn't increment vote
- add code in method to increment vote_count
  - update_attribute :vote, self.vote + 1

Discuss why not do update_attribute from controller
  - hide mechanics of "voting" from controller
  - encapsulate this knowledge inside the model
  - controller doesn't need knowledge of database


Decision Point: What Next?
- Sort view by votes
- Add a lightning talk

Sorting view gives us more value, as it takes us to the point of actually being able to use it for something.
Worth discussing with customer whether this is something that is wanted, as it might influence voting.
Notice that we are very quickly getting to discussion points. Choice of starting point leads to this answering of questions.

Discussion with customer leads us to not wanting to sort view by votes on index page, but want a page that can be used for the actual event that does have it sorted
URL: /talks/sorted

Creating sorted view
- add link to index
- add route to talks collection
- add action to talks controller
- render index action
- add call to Talk.sorted_by_vote_count
- add scope sorted_by_vote_count -  scope :sorted_by_vote_count, order("vote_count DESC")

Notice that there is no good link to move between them. Add link back to index.

Decision Point: What Next?
We now have enough (minus the styling) for this to be used at an event. If we have people submit the lightning talks by email, and we put them into the database. Not the best, but it would do if needed.
True, it would be nice to limit votes by ip address or something, but that is complexity we aren't focused on with this.

Possible next steps:
- Add a lightning talk
- Add a new event

Adding a lightning talk gets us closer to having the site be useful. While multiple events would be nice, we could spin up different instances per event. Adding a lightning talk via email and a manual process is no fun.


Adding a lightning talk
- Add a link to index page
- Add route to talks resource :new
- Add new action to talks controller
- Add new template
- Add form to template
- Add creation of new talk to new action
- Add route for create
- Add create action to controller
- Redirect to index
  - still not creating
- Add call to Talk.create




